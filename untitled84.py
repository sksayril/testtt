# -*- coding: utf-8 -*-
"""Untitled84.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SeASu6M4l-KEJJuF9o-EFZMskJKuwYoZ
"""

import json
import numpy as np
from sentence_transformers import SentenceTransformer, util

# Load JSON data from a file
with open('/content/data.json', 'r') as file:
    data = json.load(file)

# Extract customer names and mobile numbers
customer_data = [(item['customer']['name'], [mobile['value'] for mobile in item['customer']['mobile']]) for item in data]
customer_names = [item[0] for item in customer_data]

# Initialize the sentence transformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings for customer names
name_embeddings = model.encode(customer_names)

# Function to find similar customer names
def find_similar_customers(query_name, customer_names, name_embeddings, threshold=0.8):
    # Encode the query customer name
    query_embedding = model.encode([query_name])[0]

    # Compute cosine similarities
    similarities = util.cos_sim(query_embedding, name_embeddings)[0].cpu().numpy()

    # Find customers with similarity above the threshold
    similar_customers = [(customer_names[i], similarities[i]) for i in range(len(similarities)) if similarities[i] > threshold]

    return similar_customers

# Group similar customers by name
grouped_customers = []

# To keep track of already processed customers
processed_indices = set()

for idx, name in enumerate(customer_names):
    if idx in processed_indices:
        continue

    # Find customers similar to the current name
    similar_customers = find_similar_customers(name, customer_names, name_embeddings)

    # Gather their details into a group
    group = {"name": name, "mobiles": []}

    for similar_name, similarity in similar_customers:
        # Find mobile numbers for the similar name
        for customer in customer_data:
            if customer[0] == similar_name:
                group["mobiles"].extend(customer[1])

                # Mark the index of the similar customer as processed
                processed_indices.add(customer_names.index(similar_name))

    # Ensure unique mobile numbers in the group
    group["mobiles"] = list(set(group["mobiles"]))

    # Add the group to the list
    grouped_customers.append(group)

# Save the grouped customers into a new JSON file
with open('grouped_customers.json', 'w') as outfile:
    json.dump(grouped_customers, outfile, indent=4)

print("Grouped customer data saved to 'grouped_customers.json'")

!pip install transformers sentence-transformers

from google.colab import drive
drive.mount('/content/drive')

